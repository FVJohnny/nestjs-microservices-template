services:
  service-1:
    build:
      context: ${PWD}/backend
      dockerfile: services/service-1/Dockerfile
    image: copy-signals-service-1:latest
    environment:
      - NODE_ENV=production
      - PORT=3000
      - KAFKA_BROKERS=d2cd9it6crocq0g2mec0.any.ap-southeast-1.mpx.prd.cloud.redpanda.com:9092
      - KAFKA_PASSWORD=|h2(]YoYgWyZ]3]WNPW7iZVIAIHZBM
      - KAFKA_USERNAME=fvjohnny
      - PROXY_BASE_PATH=/api/service-1
      - MONGODB_URI=mongodb://admin:secureproductionpassword@mongodb:27017?authSource=admin
      - MONGODB_DB_NAME=service-1-db
    ports:
      - "3001:3000"
    networks:
      - backend
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  service-2:
    build:
      context: ${PWD}/backend
      dockerfile: services/service-2/Dockerfile
    image: copy-signals-service-2:latest
    environment:
      - NODE_ENV=production
      - PORT=3000
      - KAFKA_BROKERS=d2cd9it6crocq0g2mec0.any.ap-southeast-1.mpx.prd.cloud.redpanda.com:9092
      - KAFKA_PASSWORD=|h2(]YoYgWyZ]3]WNPW7iZVIAIHZBM
      - KAFKA_USERNAME=fvjohnny
      - PROXY_BASE_PATH=/api/service-2
      - MONGODB_URI=mongodb://admin:secureproductionpassword@mongodb:27017?authSource=admin
      - MONGODB_DB_NAME=service-2-db
    ports:
      - "3002:3000"
    networks:
      - backend
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  service-3:
    build:
      context: ${PWD}/backend
      dockerfile: services/service-3/Dockerfile
    image: copy-signals-service-3:latest
    environment:
      - NODE_ENV=production
      - PORT=8000
      - KAFKA_BROKERS=d2cd9it6crocq0g2mec0.any.ap-southeast-1.mpx.prd.cloud.redpanda.com:9092
      - KAFKA_PASSWORD=|h2(]YoYgWyZ]3]WNPW7iZVIAIHZBM
      - KAFKA_USERNAME=fvjohnny
    ports:
      - "3003:8000"
    networks:
      - backend
    depends_on:
      kafka:
        condition: service_healthy

  frontend:
    build:
      context: ${PWD}/frontend
      dockerfile: Dockerfile
    image: copy-signals-frontend:latest
    ports:
      - "3000:80"
    networks:
      - backend
    environment:
      - SERVICE_1_URL=http://service-1:3000/
      - SERVICE_2_URL=http://service-2:3000/
      - SERVICE_3_URL=http://service-3:8000/
    depends_on:
      - service-1
      - service-2
      - service-3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secureproductionpassword
      MONGO_INITDB_DATABASE: copysignals
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

networks:
  backend:
    driver: bridge

volumes:
  mongodb_data:
  mongodb_config:
